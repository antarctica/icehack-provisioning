---
# These tasks configure the underlying server/web-server for a virtual environment

# Nodes have hostnames and FQDNs formatted according to WSR-1
# These aren't particularly friendly so we setup aliases at the DNS level
# (so 'foo-prod-node1.etc' becomes just 'node1.special')
#
# We register TLS certificates for the aliases, and display this 'other' address
# within help information
#
# For this to work we therefore need to translate the 'proper' name to the 'alias' name
# This involves splitting the 'proper' hostname and selecting the last element (i.e. the node element)
- name: determine WSR-1 'node' from hostname
  shell: "echo {{ ansible_hostname }} | cut -d '-' -f3"
  changed_when: false
  register: os_wsr1_node

# This removes distracting information and gives space for our own introduction
- name: remove unwanted default message of the day elements
  file:
     path="/etc/update-motd.d/{{ item }}"
    state=absent
  with_items:
    - "00-header"
    - "10-help-text"
    - "50-landscape-sysinfo"
    - "51-cloudguest"
    - "90-updates-available"
    - "98-reboot-required"

# To help guide new users we provide a custom introductory message
# This explains how to access the Jupyter notebook and links to other resources
- name: generate icehack specific message of the day element
  template:
     src=templates/etc/update-motd.d/icehack.sh.j2
    dest=/etc/update-motd.d/10-icehack
    mode="u=rwx,g=rx,o=rx"

# The Jupyter notebook operates behind a Nginx reverse proxy, this allows us to use
# port 80, which redirects to 443 for TLS/SSL (through Lets Encrypt certificates).
#
# These tasks upload the relevant certificate and private key, and configure Nginx to use them
# By default the virtual environment only uses HTTP, to prevent placing any private information
# in the base image - which would otherwise let anyone use our certificates.

- name: upload tls certificate and private key
  copy:
      src="{{ item.src }}"
     dest="{{ item.dest }}"
  with_items:
    -
      src: "../files/certificates/{{ tls_certificate }}-certificate-including-trust-chain.crt"
      dest: "/etc/ssl/certs"
    -
      src: "../files/certificates/{{ tls_certificate }}.key"
      dest: "/etc/ssl/private"

- name: upload custom DH parameters
  copy:
     src=../files/etc/nginx/tls-dh-parameters/dhparam2048.pem
    dest=/etc/nginx/snippets/dhparam2048.pem

- name: upload tls configuration
  copy:
     src=../files/etc/nginx//tls.conf
    dest=/etc/nginx/snippets/tls.conf

- name: generate nginx site block configuration
  template:
     src=../templates/etc/nginx/sites-available/default.j2
    dest=/etc/nginx/sites-available/default

- name: restart nginx
  service:
     name=nginx
    state=restarted
